// Daniel Shackelford, COSC 1437, 11/15/19
// Dr.T
#include <iostream>
#include <string>
#include "Input_Validation_Extended.h"
using namespace std; 
/*
Implementation of Option 4 Keep it Simple	
class	Semester
int main	3 instances of semester ft, pt, ht
int main has constant	Declare constants for all those constants values, semstersInAYear, hoursPerClass,
	Ask the user to populate the constants
*/


class Semester
{
  private:
  //systems assumptions constants
  //static const variables keep their value even after multiple calls
    static const int hoursPerClass = 3; 
    static const int monthsInOneSemester = 4;
    static const int semestersInAYear = 3; 
    //user changeable settings (need: setters and getters)
    double hoursTheStudentTakes; 
    double hoursInTheDegree; 
    string schoolName; 
    double costPerCreditHour; 
    double bookCostsPerClass;
    double roomAndBoardCosts; 
    double foodCostsPerMonth; 
    double travelCostsPerMonth; 
  public:
    Semester() //default constructor
    {
        //user changeable settings default values
        hoursTheStudentTakes = 0.00; //ft 12, pt 9, ht 6
        hoursInTheDegree = 60.00; 
        schoolName = "TCC"; 
        costPerCreditHour = 64.00; 
        bookCostsPerClass = 100.00;
        roomAndBoardCosts = 1000.00; 
        foodCostsPerMonth = 150.00; 
        travelCostsPerMonth = 90.00; 
    } 
    //paramerterize constructor with initizlier list
    Semester(double hTST, double hID, string sN, double cPCH, double bCPC, double rABC, double fCPM, double tCPM) : 
    hoursTheStudentTakes(hTST), hoursInTheDegree(hID),
    schoolName(sN), costPerCreditHour(cPCH),
    bookCostsPerClass(bCPC), roomAndBoardCosts(rABC),
    foodCostsPerMonth(fCPM), travelCostsPerMonth(tCPM)
    { }
    void setHoursAStudentTakes(double h) { hoursTheStudentTakes = h; }
    void setHoursInTheDegree(double hrs) { hoursInTheDegree = hrs; }
    void setSchoolName(string sn) { schoolName = sn; }
    void setCostPerCreditHour(double chc) { costPerCreditHour = chc; }
    void setBookCostsPerClass(double bcpc) { bookCostsPerClass = bcpc; }
    void setRoomAndBoardCosts(double rbc) { roomAndBoardCosts = rbc; }
    void setFoodCostsPerMonth(double fcpm) { foodCostsPerMonth = fcpm; }
    void setTravelCostsPerMonth(double tcpm) { travelCostsPerMonth = tcpm; }
    


    double getHoursAStudentTakes() const { return hoursTheStudentTakes; }
    double getHoursInTheDegree() const { return hoursInTheDegree;}
    string getSchoolName() const { return schoolName; }
    double getCostPerCreditHour() const { return costPerCreditHour; }
    double getBookCostsPerClass() const { return bookCostsPerClass; }
    double getRoomAndBoardCosts() const { return roomAndBoardCosts; }
    double getFoodCostsPerMonth() const { return foodCostsPerMonth; }
    double getTravelCostsPerMonth() const { return travelCostsPerMonth; }
    
    
    
    //write setters and getters for the other non constant member varibles 

    //calculate tution
    double calculateTuition()
    {
    return (hoursTheStudentTakes * costPerCreditHour);
    }
    //calculate room and room and room and Board
    double calculateRoomAndBoard()
    {
      return (monthsInOneSemester * roomAndBoardCosts);
    }

    //caculate travel
    double calculateTravelCosts()
    {
      return (monthsInOneSemester * travelCostsPerMonth);
    }
    //calculate food
    double calculateFoodCosts()
    {
      return (monthsInOneSemester * foodCostsPerMonth);
    }
    //calcualte books
    double calculateBooks() 
    {
      return ((hoursTheStudentTakes / 3) * bookCostsPerClass ); 
    } 
    
    // calculate total tution 
    double calculateTotalCostPerSemester()
      {
        double result = (calculateTuition() + calculateRoomAndBoard() + calculateTravelCosts() + calculateFoodCosts() + calculateBooks());
        return result;
      }

    double calculateTotalCostFT()
    {
      double result = (calculateTotalCostPerSemester() * 10);
      return result;
    }
    double calculateTotalCostPT()
    {
      double result = (calculateTotalCostPerSemester() * 13);
      return result;
    }
    double calculateTotalCostHT()
    {
      double result = (calculateTotalCostPerSemester() * 20);
      return result;
    }
    // print total
    void printVariables()
      {
        cout << " _________________________________" << endl;
        cout << "| Variables                       | School Name: " << getSchoolName() << endl;
        cout << "|_________________________________|" << endl;
        cout << "Cost per credit Hour      : " << getCostPerCreditHour() << endl;
        cout << "Book Cost Per Class       : " << getBookCostsPerClass() << endl;
        cout << "Room/Board Cost Per Month : " << getRoomAndBoardCosts() << endl;
        cout << "Food Cost Per Month       : " << getFoodCostsPerMonth() << endl;
        cout << "Travel Costs Per Month    : " << getTravelCostsPerMonth() << endl; 
      }

    void printSemesterTotals()
      {
        cout << " _______________________________________" << endl;
        cout << "| Cost Per Semester (Fall/Spring/Summer)|Hours Taken: " << getHoursAStudentTakes() << endl;
        cout << "|_______________________________________|" << endl;
        cout << "Tuition                   : " << calculateTuition() << endl;
        cout << "Room and Board            : " << calculateRoomAndBoard() << endl;
        cout << "Travel.                   : " << calculateTravelCosts() << endl;
        cout << "Food                      : " << calculateFoodCosts() << endl;
        cout << "Book                      : " << calculateBooks() << endl;
        cout << "Total Cost Per Semester   : " << calculateTotalCostPerSemester() << endl;
      }
    
};

void printUCCollege(Semester, Semester, Semester);

int main() 
{
    //local assumptions for user input
    const int hoursAFullTimeStudent = 12;
    const int hoursAPartTimeStudent = 9;
    const int hoursAHalfTimeStudent = 6;
   
  //instances of the 3 types of semesters
   Semester ftTCC; //call default constructor
   Semester ptTCC; //calls default constuctor 
   Semester htTCC; //call default constructor
   Semester ftCollege;
   Semester ptCollege;
   Semester htCollege;

   //set hours a student a student takes per semester types
   ftTCC.setHoursAStudentTakes(hoursAFullTimeStudent);
   ptTCC.setHoursAStudentTakes(hoursAPartTimeStudent);
   htTCC.setHoursAStudentTakes(hoursAHalfTimeStudent);
   ftCollege.setHoursAStudentTakes(hoursAFullTimeStudent);
   ptCollege.setHoursAStudentTakes(hoursAPartTimeStudent);
   htCollege.setHoursAStudentTakes(hoursAHalfTimeStudent);

   string option;

      cout << "Welcome, Please enter an option: " << endl;
  cout << "A) Calculate a School of your choice" << "\nB) Calculate for TCC" << endl;
  
  cin >> option;
  cin.ignore();

   if(option == "A" || option == "a")
   {
    printUCCollege(ftCollege, ptCollege, htCollege);
   }
   else if(option == "B" || option == "b")
   {
     ftTCC.printVariables();
    ftTCC.printSemesterTotals();
    cout << endl;
    ptTCC.printSemesterTotals();
    cout << endl;
    htTCC.printSemesterTotals();
    cout <<"\n\nTotal Cost Of 60 Hour Degrees:" << endl;
    cout << "FullTime : " << ftTCC.calculateTotalCostFT();
    cout << "\nPartTime : " << ptTCC.calculateTotalCostPT();
    cout << "\nHalfTime : " << htTCC.calculateTotalCostHT();
    cout << "\n--------------------------------------------";
    cout << "\nTime For 60 Hours @ FullTime(Years) : 3.33";
    cout << "\nTime For 60 hours @ PartTime(Years) : 4.44";
    cout << "\nTime For 60 Hours @ HalfTime(Years) : 6.67";
    
   }
   else
   {
     cout << "Not a valid input, Run the program again";
   }

 
    
return 0; 
}


void printUCCollege(Semester ftCollege, Semester ptCollege, Semester htCollege)
{
  double number;
  string name;

  cout << "What is the name of your School? : ";
 // cin >> name;
 name = validateString(name);
  ftCollege.setSchoolName(name);
  ftCollege.setSchoolName(name);
  ftCollege.setSchoolName(name);

  cout << "What is your cost per credit hour? :";
  //cin >> number;
  number = validateDouble(number);
  ftCollege.setCostPerCreditHour(number);
  ptCollege.setCostPerCreditHour(number);
  htCollege.setCostPerCreditHour(number);

  cout << "What is your book costs? :";
  //cin >> number;
  number = validateDouble(number);
  ftCollege.setBookCostsPerClass(number);
  ptCollege.setBookCostsPerClass(number);
  htCollege.setBookCostsPerClass(number);

  cout << "What is your Room and Board Cost per month? :";
  //cin >> number;
  number = validateDouble(number);
  ftCollege.setRoomAndBoardCosts(number);
  ptCollege.setRoomAndBoardCosts(number);
  htCollege.setRoomAndBoardCosts(number);

  cout << "What is your food costs per month? :";
 // cin >> number;
  number = validateDouble(number);
  ftCollege.setFoodCostsPerMonth(number);
  ptCollege.setFoodCostsPerMonth(number);
  htCollege.setFoodCostsPerMonth(number);

  cout << "what is your travel costs per month? :";
  //cin >> number;
  number = validateDouble(number);
  ftCollege.setTravelCostsPerMonth(number);
  ptCollege.setTravelCostsPerMonth(number);
  htCollege.setTravelCostsPerMonth(number);
 
  ftCollege.printVariables();
  ftCollege.printSemesterTotals();
  cout << endl;
  ptCollege.printSemesterTotals();
  cout << endl;
  htCollege.printSemesterTotals();
  cout <<"\nTotal Cost Of 60 Hour Degrees:" << endl;
  cout << "FullTime : " << ftCollege.calculateTotalCostFT();
  cout << "\nPartTime : " << ptCollege.calculateTotalCostPT();
  cout << "\nHalfTime : " << htCollege.calculateTotalCostHT();
  cout << "\n--------------------------------------------";
  cout << "\nTime For 60 Hours @ FullTime(Years) : 3.33";
  cout << "\nTime For 60 hours @ PartTime(Years) : 4.44";
  cout << "\nTime For 60 Hours @ HalfTime(Years) : 6.67";
 
  
}
